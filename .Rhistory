train
train<- data.frame(
claimID = c(1,2,3),
RearEnd = c(True, False, True),
Fraud = c(True, False, True)
)
train
train <- data.frame(
claimID = c(1,2,3),
RearEnd = c(True, False, True),
Fraud = c(True, False, True)
)
train <- data.frame(
claimID = c(1,2,3),
RearEnd = c(True, False, True),
Fraud = c(True, False, True)
)
train <- data.frame(ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE))
train
install.packages('rpart')
.libPaths()
.libPaths(C:/Program Files/R/R-3.3.2/library)
.libPaths('C:/Program Files/R/R-3.3.2/library')
.libPaths()
install.packages('rpart')
.libPaths('C:/Users/ashutosh/Documents/R/win-library/3.3')
.libPaths()
.libPaths()
Sys.unsetenv(.libPaths())
.libPaths()
.libPaths('C:/Users/ashutosh/Documents/R/win-library/3.3')
.libPaths()
install.packages('rpart')
library(rpart)
myTree <- rpart(Fraud ~ ReadEnd, train, "class")
myTree <- rpart(Fraud ~ RearEnd, train, "class")
myTree <- rpart(Fraud ~ RearEnd, train, method = "class")
myTree
install.packages('party')
require(party)
iris
pwd()
dir()
path.expand()
setwd("~/")
write.csv(iris, "iris.xlsx")
write.csv(iris, "iris.xlsx")
write.csv(iris, "iris.csv")
ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)
iris
ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
install.packages(c("mvtnorm", "party", "TH.data", "zoo"))
load('C:/Users/ashutosh/Downloads/RSentiment_2.1.1.tar/RSentiment_2.1.1/RSentiment/R/sysdata.rda')
load('C:/Users/ashutosh/Downloads/RSentiment_2.1.1.tar/RSentiment_2.1.1/RSentiment/R/sysdata.rda')
a <- load('C:/Users/ashutosh/Downloads/RSentiment_2.1.1.tar/RSentiment_2.1.1/RSentiment/R/sysdata.rda')
print(a)
View(a)
install.packages('Rsentiment')
install.packages('RSentiment')
library(RSentiment)
library("RSentiment", lib.loc="~/R/win-library/3.3")
detach("package:RSentiment", unload=TRUE)
library("RSentiment", lib.loc="~/R/win-library/3.3")
detach("package:RSentiment", unload=TRUE)
library(RSentiment)
detach("package:RSentiment", unload=TRUE)
library(RSentiment)
calculate_score("what a movie, best way to waste your time")
a<-"what a movie, best way to waste your time"
calculate_score(a)
calculate_sentiment(a)
calculate_total_presence_sentiment(a)
a<-"this is a best movie to waste your time"
calculate_score(a)
calculate_sentiment(a)
calculate_total_presence_sentiment(a)
detach("package:RSentiment", unload=TRUE)
setwd("C:/Users/ashutosh/Desktop/R Work/Kaggle/Titanic")
setwd("C:/Users/ashutosh/Desktop/R Work/Kaggle/Titanic")
testData <- read.csv2('C:/Users/ashutosh/Desktop/R Work/Kaggle/Titanic', header = T)
testData <- read.csv2('C:/Users/ashutosh/Desktop/R Work/Kaggle/Titanic', header = T)
testData <- read.csv2('train.csv', header = T)
testData <- read.csv2('train.csv', header = T)
testData <- read.csv2('train.csv', header = T)
View(testData)
testDataDF <- data.frame(testData)
View(testDataDF)
testData <- read.csv2('train.csv', header = T, sep = ",")
testDataDF <- data.frame(testData)
View(testData)
testDataDF <- data.frame(testData)
View(testDataDF)
chek <- complete.cases(testDataDF)
check <- [complete.cases(testDataDF)]
check <- testDataDF[complete.cases(testDataDF)]
check <- testDataDF[complete.cases(testDataDF),]
rm(chek)
check <- testDataDF[complete.cases(testDataDF),]
View(check)
is.na(testDataDF)
check <- testDataDF[-which(na.omit(""))]
